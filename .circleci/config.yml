version: 2.1

commands:
  check-pr:
    description: "Set ENV from Pull Request Base Branch"
    steps:
      # - run:
      #     name: Install curl and jq
      #     command: |
      #       apk add --no-cache curl jq
      - run:
          name: Set ENV from Pull Request Base Branch
          command: |
            if [ -n $CIRCLE_PULL_REQUESTS ]; then
              latest_pr=$(echo ${CIRCLE_PULL_REQUESTS##*,})
              pr_name=${latest_pr:19}
              pr_number=$(echo https://api.github.com/repos/${pr_name} | sed "s/\/pull\//\/pulls\//")

              base=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" $pr_number | jq '.base.ref')

              echo ${latest_pr}
              echo ${pr_name}
              echo ${pr_number}

              echo ${base}

              if [[ '"prod"' = "$base" ]]; then
                echo 'export ENV="prod"' >> $BASH_ENV
                source $BASH_ENV
              elif [[ '"stage"' = "$base" ]]; then
                echo 'export ENV="stage"' >> $BASH_ENV
                source $BASH_ENV
              else
                echo 'Unhandled base branch: "$base"'
                exit 1
              fi

              echo ${ENV}
            fi

  tf-plan-apply:
    description: "A very simple command for demonstration purposes"
    parameters:
      tf-project:
        type: string
    steps:
      - run:
          name: (<< parameters.tf-project >>) terraform init & plan
          command: |
            source $BASH_ENV
            cd << parameters.tf-project >>
            terraform init -input=false
            terraform workspace select $ENV || terraform workspace new $ENV
            terraform plan -out tfapply -var-file variables.tfvars


jobs:
  test-dev:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - check-pr

  test-tf:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: "What branch am I on?"
          command: |
            echo ${CIRCLE_BRANCH}
      - run:
          name: "Setup ENV from branch name"
          command: |
            if [[ "$CIRCLE_BRANCH" =~ ^release\/prod* ]];
            then
              echo 'export ENV=prod' >> $BASH_ENV
            else
              echo 'export ENV=stage' >> $BASH_ENV
            fi

            source $BASH_ENV
            echo ${ENV}
      - tf-plan-apply:
          tf-project: api
      - tf-plan-apply:
          tf-project: webapp
      - persist_to_workspace:
          root: .
          paths:
            - .

workflows:
  test:
    jobs:
      - test-dev
      # - test-tf

# version: 2

# jobs:
#   plan-apply:
#     working_directory: /tmp/project
#     docker:
#       - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
#     steps:
#       - checkout
#       - run:
#           name: "What branch am I on?"
#           command: |
#             echo ${CIRCLE_BRANCH}
#       - run:
#           name: "Setup ENV from branch name"
#           command: |
#             if [[ "$CIRCLE_BRANCH" =~ ^release\/prod* ]];
#             then
#               echo 'export ENV=prod' >> $BASH_ENV
#             else
#               echo 'export ENV=stage' >> $BASH_ENV
#             fi

#             source $BASH_ENV
#             echo ${ENV}
#       - run:
#           name: (api) terraform init & plan
#           command: |
#             source $BASH_ENV
#             cd api
#             terraform init -input=false
#             terraform workspace select $ENV || terraform workspace new $ENV
#             terraform plan -out tfapply -var-file variables.tfvars
#       - run:
#           name: (webapp) terraform init & plan
#           command: |
#             source $BASH_ENV
#             cd webapp
#             terraform init -input=false
#             terraform workspace select $ENV || terraform workspace new $ENV
#             terraform plan -out tfapply -var-file variables.tfvars
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .

#   apply:
#     docker:
#       - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
#     steps:
#       - attach_workspace:
#           at: .
#       - run:
#           name: (api) terraform apply
#           command: |
#             cd api
#             terraform apply -auto-approve tfapply
#       - run:
#           name: (webapp) terraform apply
#           command: |
#             cd webapp
#             terraform apply -auto-approve tfapply
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .

#   plan-destroy:
#     docker:
#       - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
#     steps:
#       - attach_workspace:
#           at: .
#       - run:
#           name: (webapp) terraform create destroy plan
#           command: |
#             cd webapp
#             terraform plan -destroy -out tfdestroy -var-file variables.tfvars
#       - run:
#           name: (api) terraform create destroy plan
#           command: |
#             cd api
#             terraform plan -destroy -out tfdestroy -var-file variables.tfvars
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .

#   destroy:
#     docker:
#       - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
#     steps:
#       - attach_workspace:
#           at: .
#       - run:
#           name: (webapp) terraform destroy
#           command: |
#             cd webapp
#             terraform apply -auto-approve tfdestroy
#       - run:
#           name: (api) terraform destroy
#           command: |
#             cd api
#             terraform apply -auto-approve tfdestroy

# workflows:
#   version: 2
#   plan_approve_apply:
#     jobs:
#       - plan-apply:
#           filters:
#             branches:
#               only:
#                 # Run the job if branch name contains `JIRA-<ticketnumber>` or `jira-<ticketnumber>`
#                 - /.*(jira|JIRA)-\d+.*/
#                 # Run the job if branch name starts with `release/prod/`
#                 - /release\/prod\/.*/
#       - hold-apply:
#           type: approval
#           requires:
#             - plan-apply
#       - apply:
#           requires:
#             - hold-apply
#       - plan-destroy:
#           requires:
#             - apply
#       - hold-destroy:
#           type: approval
#           requires:
#             - plan-destroy
#       - destroy:
#           requires:
#             - hold-destroy
